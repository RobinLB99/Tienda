package robinlb99.tienda.igu.Nueva_venta;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import robinlb99.tienda.igu.Window;
import robinlb99.tienda.logica.Cliente;
import robinlb99.tienda.logica.LogicController;
import robinlb99.tienda.logica.Producto;

public class TraerClientes extends javax.swing.JFrame {
    
    Window window = new Window();    
    LogicController control = new LogicController();
    ArrayList<Cliente> datosClientes = control.listaClientes();
    ArrayList<Producto> productos = new ArrayList();
    private boolean cFinal;
    private long idRecibido;

    /**
     * Creates new form TraerClientes
     */
    public TraerClientes(boolean consumidorFinal, long idTomado, ArrayList<Producto> ListProductos) {
        this.productos = ListProductos;
        this.cFinal = consumidorFinal;
        this.idRecibido = idTomado;
        
        initComponents();
        
        txtFiltro.setText("");
        btnBorrarFiltro.setEnabled(false);
        cargarTabla();
        
        
        // Escuchador de evento clic para recargar la tabla
        btnBorrarFiltro.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                datosClientes = control.listaClientes();
                cargarTabla();
                txtFiltro.setText("");
                txtFiltro.setEnabled(true);
                btnFiltrar.setEnabled(true);
                btnBorrarFiltro.setEnabled(false);
            }
        });
        
        
        // Filtrar un registro por un valor
        btnFiltrar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (txtFiltro.getText().equals("")) {
                    window.mensaje("Advertencia", "warning", "El campo de filtro esta vacio.");
                } else {
                    try {
                        double ci = Double.parseDouble(txtFiltro.getText());
                        datosClientes = filtrarClientes(datosClientes, txtFiltro.getText());
                        
                        if (datosClientes.isEmpty()) {
                            window.mensaje("Error!", "error", "El ciente que deseado no existe. Verifique el numero de cedula.");
                        } else {
                            cargarTabla();
                            btnBorrarFiltro.setEnabled(true);
                            txtFiltro.setEnabled(false);
                            btnFiltrar.setEnabled(false);
                        }
                        
                    } catch (NumberFormatException ex) {
                        window.mensaje("Error", "error", "No se digito un valor numerico!");
                    }
                }
            }
        });
        
        
        btnConfirmCliente.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Controlo que la tabla no este vacia
                if (dataTable.getRowCount() > 0) {
                    // Controlo que se haya seleccionada un registro
                    if (dataTable.getSelectedRow() != -1) {
                        // Registro a editar
                        long id = Long.parseLong(String.valueOf(dataTable.getValueAt(dataTable.getSelectedRow(), 0)));
                        
                        // Obtener la instancia de NuevaVenta y establecer el ID seleccionado
                        window.nuevaVenta(cFinal, id, productos);
                        dispose();

                    } else {
                        window.mensaje("Error alert", "error", "Seleccione un registro para continuar.");
                    }
                }
            }
        });


        btnAtras.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
                window.nuevaVenta(cFinal, idRecibido, productos);
            }
        });
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        btnConfirmCliente = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();
        btnFiltrar = new javax.swing.JButton();
        btnBorrarFiltro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText(" Seleccione el cliente");

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(dataTable);

        btnConfirmCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/cheque-16px.png"))); // NOI18N
        btnConfirmCliente.setText("Confirmar");
        btnConfirmCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmClienteActionPerformed(evt);
            }
        });

        btnAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/deshacer-16px.png"))); // NOI18N
        btnAtras.setText("Atras");
        btnAtras.setIconTextGap(10);
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/buscar-24px.png"))); // NOI18N
        jLabel2.setText("Filtrar por cedula:");
        jLabel2.setIconTextGap(10);

        txtFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFiltroActionPerformed(evt);
            }
        });

        btnFiltrar.setText("Filtrar");

        btnBorrarFiltro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/borrar-24px.png"))); // NOI18N
        btnBorrarFiltro.setText("Borrar filtro");
        btnBorrarFiltro.setIconTextGap(10);
        btnBorrarFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarFiltroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConfirmCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBorrarFiltro)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBorrarFiltro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFiltro)
                    .addComponent(jLabel2)
                    .addComponent(btnFiltrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirmCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void txtFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFiltroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFiltroActionPerformed

    private void btnConfirmClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmClienteActionPerformed
        
    }//GEN-LAST:event_btnConfirmClienteActionPerformed

    private void btnBorrarFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarFiltroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBorrarFiltroActionPerformed

    
    public ArrayList<Cliente> filtrarClientes(ArrayList<Cliente> clientes, String criterio) {
        ArrayList<Cliente> registrosFiltrados = new ArrayList<>();

        for (Cliente cliente : clientes) {
            // Comparar el valor de la columna deseada con el criterio
            if (cliente.getCI().equals(criterio)) {
                registrosFiltrados.add(cliente);
            } 
        }

        return registrosFiltrados;
    }
    
    
    private void cargarTabla() {
        // Definir modelo de tabla
        DefaultTableModel tablaModel = new DefaultTableModel() {
            // Filas y columnas no editables.
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // Establecer los nombres de las columnas
        String titulos[] = {"ID", "Nombres", "Apellidos", "Cedula"};
        tablaModel.setColumnIdentifiers(titulos);

        // Recorrer datos y mostrarlos
        if (datosClientes != null) {
            for (Cliente cliente : datosClientes) {
                
                try {
                    
                    if (cliente.getConsumidorFinal().equals("No")) {

                        Object[] objeto = {cliente.getId(), cliente.getNombres(), cliente.getApellidos(), cliente.getCI()};
                        tablaModel.addRow(objeto);

                    }
                    
                } catch (Exception e) {
                    
                    window.mensaje("Error!", "error", "Ups! Ocurrio un error.\nPero lo corregire.");
                    long id = cliente.getId();
                    control.eliminarCliente(id);
                    window.mensaje("Error corregido", "info", "El error ha sido corregido.");
                    
                }

                
            }
        }

        dataTable.setModel(tablaModel);

    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnBorrarFiltro;
    private javax.swing.JButton btnConfirmCliente;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JTable dataTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}
